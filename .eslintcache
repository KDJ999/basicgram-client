[{"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/index.tsx":"1","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/reportWebVitals.ts":"2","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/App.tsx":"3","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Signup.tsx":"4","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Login.tsx":"5","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostCreate.tsx":"6","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostEdit.tsx":"7","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentCreate.tsx":"8","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostIndex.tsx":"9","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentIndex.tsx":"10","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentEdit.tsx":"11","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostTable.tsx":"12","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentTable.tsx":"13"},{"size":500,"mtime":1609862171974,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1609862171976,"results":"16","hashOfConfig":"15"},{"size":1970,"mtime":1610465725769,"results":"17","hashOfConfig":"15"},{"size":2632,"mtime":1610393771837,"results":"18","hashOfConfig":"15"},{"size":1492,"mtime":1610396698057,"results":"19","hashOfConfig":"15"},{"size":3546,"mtime":1610486662809,"results":"20","hashOfConfig":"15"},{"size":1509,"mtime":1610405847145,"results":"21","hashOfConfig":"15"},{"size":1839,"mtime":1610497756339,"results":"22","hashOfConfig":"15"},{"size":3807,"mtime":1610480515631,"results":"23","hashOfConfig":"15"},{"size":3236,"mtime":1610497795117,"results":"24","hashOfConfig":"15"},{"size":1439,"mtime":1610479608951,"results":"25","hashOfConfig":"15"},{"size":3885,"mtime":1610487164682,"results":"26","hashOfConfig":"15"},{"size":1474,"mtime":1610497830842,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"11e2fof",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/index.tsx",[],["63","64"],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/reportWebVitals.ts",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/App.tsx",["65"],"import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Signup from \"./Components/Auth/Signup\";\nimport Login from \"./Components/Auth/Login\";\nimport PostIndex from \"./Components/Post/PostIndex\";\nimport CommentIndex from \"./Components/Comment/CommentIndex\";\n\ntype State = {\n  sessionToken: string;\n};\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: State) {\n    super(props);\n    this.state = {\n      sessionToken: \"\",\n    };\n  }\n  componentDidMount() {\n    if (localStorage.getItem(\"token\")) {\n      this.setState({\n        sessionToken: localStorage.getItem(\"token\") as string,\n      });\n    }\n  }\n  updateToken = (newToken: string) => {\n    localStorage.setItem(\"token\", newToken);\n    this.setState({\n      sessionToken: newToken,\n    });\n  };\n\n  clearToken() {\n    localStorage.clear();\n    this.setState({\n      sessionToken: \"\",\n    });\n    sessionStorage.clear();\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">Signup</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/postindex\">PostIndex</Link>\n            </li>\n            <li>\n              <Link to=\"/commentindex\">CommentIndex</Link>\n            </li>\n          </ul>\n        </div>\n        <hr />\n        <Switch>\n          <Route exact path=\"/\">\n            <Signup updateToken={this.updateToken} />\n          </Route>\n          <Route exact path=\"/login\">\n            <Login updateToken={this.updateToken} />\n          </Route>\n          <Route exact path=\"/postindex\">\n            <PostIndex sessionToken={this.state.sessionToken} />\n          </Route>\n          <Route exact path=\"/commentindex\">\n            {/* <CommentIndex sessionToken={this.state.sessionToken} /> */}\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Signup.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Login.tsx",["66"],"import React, { ChangeEvent, FormEvent } from \"react\";\n\ntype AcceptedProps = {\n    updateToken: (newToken: string) => void\n};\n  \n  type UserState = {\n    email: string;\n    password: string;\n  };\n  \nexport default class Login extends React.Component<AcceptedProps, UserState> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n    };\n  }\n  \n  handleSubmit = (event: FormEvent) => {\n      event.preventDefault();\n    let url = \"http://localhost:4000/user/login\";\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        //Userstate: this.state\n        email: this.state.email,\n        password: this.state.password,\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        this.props.updateToken(data.token);     \n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Login</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            placeholder=\"email\"\n            value={this.state.email}\n            onChange={(e) => this.setState({ email: e.target.value })} />\n          <input\n            placeholder=\"password\"\n            value={this.state.password}\n            onChange={(e) => this.setState({ password: e.target.value })} />\n            <button>Submit</button>\n        </form>\n      </div>\n    )\n  }\n};  ","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostCreate.tsx",["67","68","69"],"import { render } from \"@testing-library/react\";\nimport { integer } from \"aws-sdk/clients/frauddetector\";\nimport React, { FormEvent } from \"react\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  postToCreate: any;\n  fetchPosts: () => void;\n  createOff: () => void;\n  ShowTable(): void;\n};\n\ntype PostState = {\n  //image\n  file: string;\n  description: string;\n  likes: number;\n  // PostId: number | null;\n};\n\nexport default class PostCreate extends React.Component<\n  AcceptedProps,\n  PostState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      file: \"\",\n      description: \"\",\n      likes: 0,\n      // PostId: null,\n    };\n  }\n\n  handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    const postData = new FormData();\n    postData.append(\"image\", this.state.file);\n    postData.append(\"description\", this.state.description);\n    postData.append(\"likes\", this.state.likes.toString());\n\n    console.log(postData);\n    fetch(\"http://localhost:4000/post/createpost\", {\n      method: \"POST\",\n      body: postData,\n      headers: new Headers({\n        // \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          description: \"\",\n          likes: 0,\n        });\n        console.log(data);\n        this.props.ShowTable();\n        // this.props.fetchPosts();\n        // this.props.createOff();\n        // this.setState({file: data.file, description: data.description, likes: data.likes})\n      })\n      .catch((err) => console.log(\"This is where the error is\" + err));\n  };\n  // console.log(this.state);\n  // event.preventDefault();\n  // let upload = document.getElementById(\"upload\");\n  // if (upload) {\n  //   upload.innerHTML = \"HTMLElement\";\n  // }\n  // const postData = new FormData();\n  // //postman => formdata\n  // postData.append(\"image\", this.state\n  //   upload.files[0]\n  // postData.append(\"description\", this.state.description);\n  // postData.append(\"likes\", this.state.likes.toString());\n\n  singleFileChangedHandler = (e: any) => {\n    this.setState({\n      file: e.target.files[0],\n    });\n  };\n\n  handleDescriptionInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ description: e.currentTarget.value });\n  };\n  // handleFileInput = (e: React.FormEvent<HTMLInputElement>): void => {\n  //   this.setState({ file: e.currentTarget.value });\n  // };\n  handleLikesInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ likes: e.currentTarget.valueAsNumber });\n  };\n\n  // getPostId = (id: number) => {\n  //   this.setState({\n  //     PostId: id,\n  //   });\n  // };\n  render() {\n    return (\n      <div>\n        <h1>Create Post </h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"file\"\n            placeholder=\"file\"\n            // value={this.state.file}\n            id=\"upload\"\n            multiple\n            accept=\"image/*\"\n            onChange={this.singleFileChangedHandler}\n          />\n          <input\n            placeholder=\"description\"\n            value={this.state.description}\n            onChange={(e) => this.setState({ description: e.target.value })}\n          />\n          <input\n            placeholder=\"likes\"\n            value={this.state.likes}\n            type=\"number\"\n            onChange={(e) => this.setState({ likes: e.target.valueAsNumber })}\n          />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostEdit.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentCreate.tsx",["70","71","72"],"import React, { FormEvent } from \"react\";\nimport { render } from \"@testing-library/react\";\nimport { integer } from \"aws-sdk/clients/frauddetector\";\nimport TextField from \"@material-ui/core/TextField\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  commentToCreate: any;\n  fetchComments: () => void;\n  createOff: () => void;\n  ShowTable(): void;\n};\n\ntype CommentState = {\n  comment: string;\n};\n\nexport default class CommentCreate extends React.Component<\n  AcceptedProps,\n  CommentState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      comment: \"\",\n    };\n  }\n\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    console.log(\"please\", this.state.comment);\n    fetch(\"http://localhost:4000/comment/createcomment\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        comment: this.state.comment,\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          comment: \"\",\n        });\n        console.log(data);\n        this.props.ShowTable();\n        // this.props.fetchComments();\n      })\n      .catch((err) => console.log(\"This is where the error is\" + err));\n  };\n\n  handleCommentInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ comment: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Create Comment </h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"comment\"\n            placeholder=\"comment\"\n            value={this.state.comment}\n            onChange={(e) => this.setState({ comment: e.target.value })}\n          />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostIndex.tsx",["73"],"import React from \"react\";\nimport { createIndexedAccessTypeNode } from \"typescript\";\nimport PostCreate from \"./PostCreate\";\nimport PostEdit from \"./PostEdit\";\nimport PostTable from \"./PostTable\";\nimport CreateIndex from \"../Comment/CommentIndex\";\ntype AcceptedProps = {\n  sessionToken: string;\n};\n\ntype IndexState = {\n  Posts: any;\n  postToCreate: any;\n  postToCreateActive: boolean;\n  postToUpdate: any;\n  updateActive: boolean;\n  ShowTable: boolean;\n  // PostId: number | null;\n};\nexport default class PostIndex extends React.Component<\n  AcceptedProps,\n  IndexState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      Posts: [],\n      postToCreate: {},\n      postToCreateActive: false,\n      postToUpdate: {},\n      updateActive: false,\n      ShowTable: false,\n      // PostId: null,\n    };\n  }\n  fetchPosts = () => {\n    fetch(\"http://localhost:4000/post/getallposts\", {\n      method: \"GET\",\n      // body: JSON.stringify({}),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${localStorage.getItem(\"token\")}`,\n\n        // this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((postData) => {\n        this.setState({\n          Posts: postData,\n        });\n        console.log(postData);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  DeletePost = (e: React.FormEvent<HTMLInputElement>) => {\n    fetch(\"http://localhost:4000/post/delete/id\", {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    }).then(() => this.fetchPosts());\n  };\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  //classes cannot have const keyword unlike workoutClient\n  editpostToCreatePosts = (post: any) => {\n    this.setState({\n      postToCreate: post,\n    });\n  };\n  editpostToUpdatePosts = (post: any) => {\n    this.setState({\n      postToUpdate: post,\n    });\n  };\n\n  createOn = () => {\n    this.setState({\n      postToCreateActive: true,\n    });\n  };\n  createOff = () => {\n    this.setState({\n      postToCreateActive: false,\n    });\n  };\n  updateOn = () => {\n    this.setState({\n      updateActive: true,\n    });\n  };\n\n  updateOff = () => {\n    this.setState({\n      updateActive: false,\n    });\n  };\n\n  ShowTable = () => {\n    this.setState({\n      ShowTable: true,\n    });\n  };\n  // getPostId = (id: number) => {\n  //   this.setState({\n  //     PostId: id,\n  //   });\n  // };\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.createOn()}>Create your Post Here!</button>\n        {this.state.postToCreateActive ? (\n          <PostCreate\n            postToCreate={this.state.postToCreate}\n            fetchPosts={this.fetchPosts.bind(this)}\n            sessionToken={this.props.sessionToken}\n            createOff={this.createOff.bind(this)}\n            ShowTable={this.ShowTable}\n          />\n        ) : (\n          <></>\n        )}\n        {this.state.updateActive ? (\n          <PostEdit\n            postToUpdate={this.state.postToUpdate}\n            updateOff={this.updateOff.bind(this)}\n            sessionToken={this.props.sessionToken}\n            fetchPosts={this.fetchPosts.bind(this)}\n          />\n        ) : (\n          <></>\n        )}\n        {/* {this.state.ShowTable ? ( */}\n        <PostTable\n          Posts={this.state.Posts}\n          editpostToUpdatePosts={this.editpostToUpdatePosts.bind(this)}\n          updateOn={this.updateOn.bind(this)}\n          fetchPosts={this.fetchPosts.bind(this)}\n          sessionToken={this.props.sessionToken}\n          // getPostId={this.getPostId}\n        />\n        <CreateIndex\n          sessionToken={this.props.sessionToken}\n          // PostId={this.state.PostId}\n        />\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentIndex.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentEdit.tsx",["74"],"import React from \"react\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  fetchComments: () => void;\n  updateOff: () => void;\n  commentToUpdate: any;\n};\n\ntype CommentEditState = {\n  editComment: string;\n};\n\nexport default class CommentEdit extends React.Component<\n  AcceptedProps,\n  CommentEditState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      editComment: this.props.commentToUpdate.comment,\n    };\n  }\n  handleUpdate = () => {\n    fetch(\"http://localhost:4000/comment/update/${Posts.id}\", {\n      method: \"PUT\",\n      body: JSON.stringify({\n        comment: this.state.editComment,\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Works\");\n      })\n\n      .catch((err) => console.log(err));\n  };\n  handleeditCommentInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ editComment: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Edit Comment </h1>\n        <form onSubmit={this.handleUpdate}>\n          <input\n            placeholder=\"editComment\"\n            value={this.state.editComment}\n            onChange={(e) => this.setState({ editComment: e.target.value })}\n          />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostTable.tsx",["75","76","77"],"import React, { DetailedHTMLProps, FormEvent } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles, createStyles } from \"@material-ui/core\";\n\nconst styles = createStyles({\n  root: {\n    height: \"100px\",\n    width: \"100px\",\n  },\n  comment: {\n    backgroundColor: \"red\",\n  },\n});\n\ntype AcceptedProps = {\n  Posts: [];\n  sessionToken: string;\n  editpostToUpdatePosts: (post: any) => void;\n  updateOn: () => void;\n  fetchPosts: () => void;\n  // getPostId: (id: number) => void;\n  classes: any;\n};\n\ntype DeleteState = {\n  // Posts: any;\n  //image\n  // file: string;\n  // description: string;\n  Comments: [];\n};\n\nclass PostTable extends React.Component<AcceptedProps, DeleteState> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      Comments: [],\n      //   Posts: [],\n      // file: \"\",\n      // description: \"\"\n    };\n    //console.log(this.props);\n  }\n\n  DeletePost = (post: any) => {\n    ///delete/:id\n    fetch(`http://localhost:4000/post/delete/${post.id}`, {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    }).then(() => this.props.fetchPosts());\n  };\n\n  //comments fetch/set comment state variable\n  fetchComments(posts: any) {\n    console.log(\"this Works\", posts);\n    //get comments by specific post id\n    fetch(`http://localhost:4000/comment/getallcomments/${posts.id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      },\n    })\n      .then((res) => res.json())\n      .then((commentData) => {\n        console.log(\"works\", commentData);\n        this.setState(\n          {\n            Comments: commentData,\n          },\n          () => {\n            console.log(this.state.Comments);\n          }\n        );\n      })\n      .catch((err) => console.log(err));\n  }\n\n  commentDisplay = (Posts: any, classes: any) => {\n    console.log(Posts);\n    if (Posts.comments) {\n      if (Posts.comments.length > 0) {\n        Posts.comments.map((comment: any, index: any) => {\n          return (\n            <div className={classes.comment} key={index}>\n              <h3>{comment}</h3>\n            </div>\n          );\n        });\n      }\n    } else {\n      return null;\n    }\n  };\n\n  PostMapper = (classes: any) => {\n    //maps are just foreachs\n    console.log(this.props.Posts);\n    return this.props.Posts.map((Posts: any, index: number) => {\n      console.log(\"POST DATA\", Posts);\n      return (\n        <tr key={Posts.id}>\n          <img className={classes.root} src={Posts.file} alt=\"Posts\"></img>\n\n          <td>{Posts.description}</td>\n          <td>{Posts.likes}</td>\n          <td>\n            <Button\n              // color=\"warning\"\n              onClick={() => {\n                this.props.editpostToUpdatePosts(Posts);\n                this.props.updateOn();\n              }}\n            >\n              Update\n            </Button>\n            <Button\n              onClick={() => {\n                // this.props.getPostId(Posts.id);\n                {\n                  this.fetchComments(Posts);\n                }\n                // this.commentDisplay(Posts.id, classes);\n              }}\n            >\n              Comment\n            </Button>\n            <Button\n              // color=\"danger\"\n              onClick={() => {\n                this.DeletePost(Posts);\n              }}\n            >\n              Delete\n            </Button>\n          </td>\n          {this.commentDisplay(Posts, classes)}\n        </tr>\n      );\n    });\n  };\n\n  // componentDidMount() {\n  //   this.fetchComments();\n  // }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <>\n        <h3>Posts</h3>\n\n        <div>{this.PostMapper(classes)}</div>\n      </>\n    );\n  }\n}\nexport default withStyles(styles)(PostTable);\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentTable.tsx",["78","79"],"import React, { FormEvent } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  Comments: any;\n  editcommentToUpdateComments: (comment: any) => void;\n  updateOn: () => void;\n  fetchComments: () => void;\n};\n\ntype DeleteState = {};\nexport default class CommentDelete extends React.Component<AcceptedProps> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      Comments: [],\n      // likes: 0,\n    };\n  }\n  fetchComments = () => {\n    //get comments by specific post id\n    fetch(\"http://localhost:4000/comment/getallcomments\", {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${localStorage.getItem(\"token\")}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((commentData) => {\n        this.setState({\n          Comments: commentData,\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  DeleteComment = (event: FormEvent) => {\n    fetch(\"http://localhost:4000/comment/delete/id\", {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    }).then(() => this.props.fetchComments());\n  };\n\n  componentDidMount() {\n    this.fetchComments();\n  }\n\n  render() {\n    return (\n      <>\n        <h3>Comments</h3>\n\n        {/* <div>{this.PostMapper()}</div> */}\n      </>\n    );\n  }\n}\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":20},{"ruleId":"84","severity":1,"message":"88","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":28},{"ruleId":"84","severity":1,"message":"89","line":1,"column":10,"nodeType":"86","messageId":"87","endLine":1,"endColumn":16},{"ruleId":"84","severity":1,"message":"90","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":17},{"ruleId":"84","severity":1,"message":"91","line":3,"column":17,"nodeType":"86","messageId":"87","endLine":3,"endColumn":26},{"ruleId":"84","severity":1,"message":"89","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":16},{"ruleId":"84","severity":1,"message":"90","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":17},{"ruleId":"84","severity":1,"message":"92","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":17},{"ruleId":"84","severity":1,"message":"93","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":25,"column":11,"nodeType":"96","messageId":"97","endLine":25,"endColumn":61},{"ruleId":"84","severity":1,"message":"98","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":34},{"ruleId":"84","severity":1,"message":"91","line":1,"column":36,"nodeType":"86","messageId":"87","endLine":1,"endColumn":45},{"ruleId":"99","severity":1,"message":"100","line":123,"column":17,"nodeType":"101","messageId":"102","endLine":125,"endColumn":18},{"ruleId":"84","severity":1,"message":"103","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":20},{"ruleId":"84","severity":1,"message":"104","line":12,"column":6,"nodeType":"86","messageId":"87","endLine":12,"endColumn":17},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"@typescript-eslint/no-unused-vars","'CommentIndex' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'render' is defined but never used.","'integer' is defined but never used.","'FormEvent' is defined but never used.","'TextField' is defined but never used.","'createIndexedAccessTypeNode' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'DetailedHTMLProps' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'makeStyles' is defined but never used.","'DeleteState' is defined but never used.","no-global-assign","no-unsafe-negation"]