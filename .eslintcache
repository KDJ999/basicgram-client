[{"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/index.tsx":"1","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/reportWebVitals.ts":"2","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/App.tsx":"3","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Signup.tsx":"4","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Login.tsx":"5","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostCreate.tsx":"6","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostEdit.tsx":"7","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentCreate.tsx":"8","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostIndex.tsx":"9","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentIndex.tsx":"10","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentEdit.tsx":"11","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostTable.tsx":"12","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentTable.tsx":"13","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/helpers/environment.js":"14"},{"size":500,"mtime":1609862171974,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1609862171976,"results":"17","hashOfConfig":"16"},{"size":1736,"mtime":1610513191911,"results":"18","hashOfConfig":"16"},{"size":2264,"mtime":1610509274730,"results":"19","hashOfConfig":"16"},{"size":1531,"mtime":1610509250828,"results":"20","hashOfConfig":"16"},{"size":3582,"mtime":1610509318264,"results":"21","hashOfConfig":"16"},{"size":1562,"mtime":1610509935878,"results":"22","hashOfConfig":"16"},{"size":1875,"mtime":1610509756367,"results":"23","hashOfConfig":"16"},{"size":3827,"mtime":1610509432228,"results":"24","hashOfConfig":"16"},{"size":3272,"mtime":1610509559186,"results":"25","hashOfConfig":"16"},{"size":1485,"mtime":1610509943104,"results":"26","hashOfConfig":"16"},{"size":3907,"mtime":1610516374312,"results":"27","hashOfConfig":"16"},{"size":1498,"mtime":1610509531768,"results":"28","hashOfConfig":"16"},{"size":293,"mtime":1610508933871,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"11e2fof",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/index.tsx",[],["65","66"],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/reportWebVitals.ts",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/App.tsx",["67"],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Signup.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Auth/Login.tsx",["68"],"import React, { ChangeEvent, FormEvent } from \"react\";\nimport APIURL from \"../../helpers/environment\";\n\ntype AcceptedProps = {\n  updateToken: (newToken: string) => void;\n};\n\ntype UserState = {\n  email: string;\n  password: string;\n};\n\nexport default class Login extends React.Component<AcceptedProps, UserState> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n    };\n  }\n\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    let url = `${APIURL}/user/login`;\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        //Userstate: this.state\n        email: this.state.email,\n        password: this.state.password,\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        this.props.updateToken(data.token);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Login</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            placeholder=\"email\"\n            value={this.state.email}\n            onChange={(e) => this.setState({ email: e.target.value })}\n          />\n          <input\n            placeholder=\"password\"\n            value={this.state.password}\n            onChange={(e) => this.setState({ password: e.target.value })}\n          />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostCreate.tsx",["69","70","71"],"import { render } from \"@testing-library/react\";\nimport { integer } from \"aws-sdk/clients/frauddetector\";\nimport React, { FormEvent } from \"react\";\nimport APIURL from \"../../helpers/environment\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  postToCreate: any;\n  fetchPosts: () => void;\n  createOff: () => void;\n  ShowTable(): void;\n};\n\ntype PostState = {\n  //image\n  file: string;\n  description: string;\n  likes: number;\n  // PostId: number | null;\n};\n\nexport default class PostCreate extends React.Component<\n  AcceptedProps,\n  PostState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      file: \"\",\n      description: \"\",\n      likes: 0,\n      // PostId: null,\n    };\n  }\n\n  handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    const postData = new FormData();\n    postData.append(\"image\", this.state.file);\n    postData.append(\"description\", this.state.description);\n    postData.append(\"likes\", this.state.likes.toString());\n\n    console.log(postData);\n    fetch(`${APIURL}/post/createpost`, {\n      method: \"POST\",\n      body: postData,\n      headers: new Headers({\n        // \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          description: \"\",\n          likes: 0,\n        });\n        console.log(data);\n        this.props.ShowTable();\n        // this.props.fetchPosts();\n        // this.props.createOff();\n        // this.setState({file: data.file, description: data.description, likes: data.likes})\n      })\n      .catch((err) => console.log(\"This is where the error is\" + err));\n  };\n  // console.log(this.state);\n  // event.preventDefault();\n  // let upload = document.getElementById(\"upload\");\n  // if (upload) {\n  //   upload.innerHTML = \"HTMLElement\";\n  // }\n  // const postData = new FormData();\n  // //postman => formdata\n  // postData.append(\"image\", this.state\n  //   upload.files[0]\n  // postData.append(\"description\", this.state.description);\n  // postData.append(\"likes\", this.state.likes.toString());\n\n  singleFileChangedHandler = (e: any) => {\n    this.setState({\n      file: e.target.files[0],\n    });\n  };\n\n  handleDescriptionInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ description: e.currentTarget.value });\n  };\n  // handleFileInput = (e: React.FormEvent<HTMLInputElement>): void => {\n  //   this.setState({ file: e.currentTarget.value });\n  // };\n  handleLikesInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ likes: e.currentTarget.valueAsNumber });\n  };\n\n  // getPostId = (id: number) => {\n  //   this.setState({\n  //     PostId: id,\n  //   });\n  // };\n  render() {\n    return (\n      <div>\n        <h1>Create Post </h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"file\"\n            placeholder=\"file\"\n            // value={this.state.file}\n            id=\"upload\"\n            multiple\n            accept=\"image/*\"\n            onChange={this.singleFileChangedHandler}\n          />\n          <input\n            placeholder=\"description\"\n            value={this.state.description}\n            onChange={(e) => this.setState({ description: e.target.value })}\n          />\n          <input\n            placeholder=\"likes\"\n            value={this.state.likes}\n            type=\"number\"\n            onChange={(e) => this.setState({ likes: e.target.valueAsNumber })}\n          />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostEdit.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentCreate.tsx",["72","73","74"],"import React, { FormEvent } from \"react\";\nimport { render } from \"@testing-library/react\";\nimport { integer } from \"aws-sdk/clients/frauddetector\";\nimport TextField from \"@material-ui/core/TextField\";\nimport APIURL from \"../../helpers/environment\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  commentToCreate: any;\n  fetchComments: () => void;\n  createOff: () => void;\n  ShowTable(): void;\n};\n\ntype CommentState = {\n  comment: string;\n};\n\nexport default class CommentCreate extends React.Component<\n  AcceptedProps,\n  CommentState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      comment: \"\",\n    };\n  }\n\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    console.log(\"please\", this.state.comment);\n    fetch(`${APIURL}/comment/createcomment`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        comment: this.state.comment,\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          comment: \"\",\n        });\n        console.log(data);\n        this.props.ShowTable();\n        // this.props.fetchComments();\n      })\n      .catch((err) => console.log(\"This is where the error is\" + err));\n  };\n\n  handleCommentInput = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ comment: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Create Comment </h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"comment\"\n            placeholder=\"comment\"\n            value={this.state.comment}\n            onChange={(e) => this.setState({ comment: e.target.value })}\n          />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostIndex.tsx",["75"],"import React from \"react\";\nimport { createIndexedAccessTypeNode } from \"typescript\";\nimport PostCreate from \"./PostCreate\";\nimport PostEdit from \"./PostEdit\";\nimport PostTable from \"./PostTable\";\nimport CreateIndex from \"../Comment/CommentIndex\";\nimport APIURL from \"../../helpers/environment\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n};\n\ntype IndexState = {\n  Posts: any;\n  postToCreate: any;\n  postToCreateActive: boolean;\n  postToUpdate: any;\n  updateActive: boolean;\n  ShowTable: boolean;\n  // PostId: number | null;\n};\nexport default class PostIndex extends React.Component<\n  AcceptedProps,\n  IndexState\n> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      Posts: [],\n      postToCreate: {},\n      postToCreateActive: false,\n      postToUpdate: {},\n      updateActive: false,\n      ShowTable: false,\n      // PostId: null,\n    };\n  }\n  fetchPosts = () => {\n    fetch(`${APIURL}/post/getallposts`, {\n      method: \"GET\",\n      // body: JSON.stringify({}),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${localStorage.getItem(\"token\")}`,\n\n        // this.props.sessionToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((postData) => {\n        this.setState({\n          Posts: postData,\n        });\n        console.log(postData);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  DeletePost = (e: React.FormEvent<HTMLInputElement>) => {\n    fetch(`${APIURL}/delete/id`, {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    }).then(() => this.fetchPosts());\n  };\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  //classes cannot have const keyword unlike workoutClient\n  editpostToCreatePosts = (post: any) => {\n    this.setState({\n      postToCreate: post,\n    });\n  };\n  editpostToUpdatePosts = (post: any) => {\n    this.setState({\n      postToUpdate: post,\n    });\n  };\n\n  createOn = () => {\n    this.setState({\n      postToCreateActive: true,\n    });\n  };\n  createOff = () => {\n    this.setState({\n      postToCreateActive: false,\n    });\n  };\n  updateOn = () => {\n    this.setState({\n      updateActive: true,\n    });\n  };\n\n  updateOff = () => {\n    this.setState({\n      updateActive: false,\n    });\n  };\n\n  ShowTable = () => {\n    this.setState({\n      ShowTable: true,\n    });\n  };\n  // getPostId = (id: number) => {\n  //   this.setState({\n  //     PostId: id,\n  //   });\n  // };\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.createOn()}>Create your Post Here!</button>\n        {this.state.postToCreateActive ? (\n          <PostCreate\n            postToCreate={this.state.postToCreate}\n            fetchPosts={this.fetchPosts.bind(this)}\n            sessionToken={this.props.sessionToken}\n            createOff={this.createOff.bind(this)}\n            ShowTable={this.ShowTable}\n          />\n        ) : (\n          <></>\n        )}\n        {this.state.updateActive ? (\n          <PostEdit\n            postToUpdate={this.state.postToUpdate}\n            updateOff={this.updateOff.bind(this)}\n            sessionToken={this.props.sessionToken}\n            fetchPosts={this.fetchPosts.bind(this)}\n          />\n        ) : (\n          <></>\n        )}\n        {/* {this.state.ShowTable ? ( */}\n        <PostTable\n          Posts={this.state.Posts}\n          editpostToUpdatePosts={this.editpostToUpdatePosts.bind(this)}\n          updateOn={this.updateOn.bind(this)}\n          fetchPosts={this.fetchPosts.bind(this)}\n          sessionToken={this.props.sessionToken}\n          // getPostId={this.getPostId}\n        />\n        <CreateIndex\n          sessionToken={this.props.sessionToken}\n          // PostId={this.state.PostId}\n        />\n      </div>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentIndex.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentEdit.tsx",[],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Post/PostTable.tsx",["76","77","78"],"/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/Components/Comment/CommentTable.tsx",["79","80"],"import React, { FormEvent } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport APIURL from \"../../helpers/environment\";\n\ntype AcceptedProps = {\n  sessionToken: string;\n  Comments: any;\n  editcommentToUpdateComments: (comment: any) => void;\n  updateOn: () => void;\n  fetchComments: () => void;\n};\n\ntype DeleteState = {};\nexport default class CommentDelete extends React.Component<AcceptedProps> {\n  constructor(props: AcceptedProps) {\n    super(props);\n    this.state = {\n      Comments: [],\n      // likes: 0,\n    };\n  }\n  fetchComments = () => {\n    //get comments by specific post id\n    fetch(`${APIURL}/comment/getallcomments`, {\n      method: \"GET\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${localStorage.getItem(\"token\")}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((commentData) => {\n        this.setState({\n          Comments: commentData,\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  DeleteComment = (event: FormEvent) => {\n    fetch(`${APIURL}/comment/delete/id`, {\n      method: \"DELETE\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.sessionToken,\n      }),\n    }).then(() => this.props.fetchComments());\n  };\n\n  componentDidMount() {\n    this.fetchComments();\n  }\n\n  render() {\n    return (\n      <>\n        <h3>Comments</h3>\n\n        {/* <div>{this.PostMapper()}</div> */}\n      </>\n    );\n  }\n}\n","/Users/kdj/Desktop/WDOctober2020/Red Badge/final/client/src/helpers/environment.js",[],["81","82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":20},{"ruleId":"87","severity":1,"message":"91","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":28},{"ruleId":"87","severity":1,"message":"92","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":16},{"ruleId":"87","severity":1,"message":"93","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":17},{"ruleId":"87","severity":1,"message":"94","line":3,"column":17,"nodeType":"89","messageId":"90","endLine":3,"endColumn":26},{"ruleId":"87","severity":1,"message":"92","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":16},{"ruleId":"87","severity":1,"message":"93","line":3,"column":10,"nodeType":"89","messageId":"90","endLine":3,"endColumn":17},{"ruleId":"87","severity":1,"message":"95","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":17},{"ruleId":"87","severity":1,"message":"96","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":37},{"ruleId":"87","severity":1,"message":"97","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":34},{"ruleId":"87","severity":1,"message":"94","line":1,"column":36,"nodeType":"89","messageId":"90","endLine":1,"endColumn":45},{"ruleId":"98","severity":1,"message":"99","line":124,"column":17,"nodeType":"100","messageId":"101","endLine":126,"endColumn":18},{"ruleId":"87","severity":1,"message":"102","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":20},{"ruleId":"87","severity":1,"message":"103","line":13,"column":6,"nodeType":"89","messageId":"90","endLine":13,"endColumn":17},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'CommentIndex' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'render' is defined but never used.","'integer' is defined but never used.","'FormEvent' is defined but never used.","'TextField' is defined but never used.","'createIndexedAccessTypeNode' is defined but never used.","'DetailedHTMLProps' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'makeStyles' is defined but never used.","'DeleteState' is defined but never used.","no-global-assign","no-unsafe-negation"]